/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package VistaNegocio;

import Controlador.Conexion;
import Controlador.ControllerSql;
import Decorador.Marca_del_producto;
import Decorador.Producto_tipo_automotor;
import Decorador.Producto_tipo_comida;
import Decorador.Producto_tipo_electronico;
import Decorador.Producto_tipo_ropa;
import Funciones.FuncionesController;
import Modelo.Producto;
import Modelo.Proveedor;
import static VistaNegocio.VistaIngresarProductossss.LitsadeProovedores;
import static VistaNegocio.VistaIngresarProductossss.TextCodProduct;
import static VistaNegocio.VistaIngresarProductossss.TextCostoproduc;
import static VistaNegocio.VistaIngresarProductossss.TextDescripcion;
import static VistaNegocio.VistaIngresarProductossss.TextPrecio;
import static VistaNegocio.VistaIngresarProductossss.jcboxTipoProducto;
import static VistaNegocio.VistaIngresarProductossss.txtIvap;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.List;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author negro
 */
public class VistaProductos extends javax.swing.JFrame {

    public ControllerSql obj;
    FuncionesController cc = new FuncionesController();
    private Producto prodAc;
    private List<Proveedor> proveedores;
    CallableStatement cts;
    Connection cn;
    ResultSet r;
    JComboBox JComboBox;
    JCheckBox JCheckBox;

    /**
     * Creates new form CorrecionDefecto
     */
    public VistaProductos() {
       setUndecorated(true);
        initComponents();
        ValidadSoloNumeros(TextCodProduct);
        ValidadCaracteres(TextDescripcion);
        ValidadSoloNumeros(TextPrecio);
        ValidadSoloNumeros(TextCostoproduc);
        ValidadSoloNumeros(txtIvap);
        cn = Conexion.getConn();
        cargar();

        LitsadeProovedores.setModel(new javax.swing.DefaultComboBoxModel(cc.listaProvee().toArray()));

        obj = ControllerSql.getInstancia();
        proveedores = cc.listaProvee();
        //    LitsadeProovedores.setModel(new javax.swing.DefaultComboBoxModel(proveedores.toArray()));
        LitsadeProovedores.setSelectedIndex(-1);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        TextCodProduct = new javax.swing.JTextField();
        TextDescripcion = new javax.swing.JTextField();
        TextCostoproduc = new javax.swing.JTextField();
        LitsadeProovedores = new javax.swing.JComboBox();
        TextPrecio = new javax.swing.JTextField();
        txtIvap = new javax.swing.JTextField();
        jcboxTipoProducto = new javax.swing.JComboBox();
        BtnIngresar = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jCheckBox1 = new javax.swing.JCheckBox();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Codigo");

        jLabel2.setText("Descripcion");

        jLabel3.setText("Costo");

        jLabel4.setText("Precio");

        jLabel5.setText("Iva");

        jLabel6.setText("Proveedor");

        jLabel7.setText("Tipo de producto");

        jcboxTipoProducto.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Electronicos", "Ropa", "Alimentos", "Automotor" }));

        BtnIngresar.setText("Ingresar");
        BtnIngresar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnIngresarActionPerformed(evt);
            }
        });

        jButton3.setText("Buscar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton5.setText("Cancelar");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jCheckBox1.setText("Marca Y Peso");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/minimizar.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Img/cerrar2.png"))); // NOI18N
        jButton2.setText("jButton2");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(BtnIngresar, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5)
                .addGap(25, 25, 25))
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(67, 67, 67)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(TextPrecio, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                            .addComponent(TextCostoproduc)
                            .addComponent(TextDescripcion)
                            .addComponent(TextCodProduct))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jCheckBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(151, 151, 151))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7))
                                .addGap(40, 40, 40)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(LitsadeProovedores, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(151, 151, 151))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jcboxTipoProducto, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 722, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(118, 118, 118)
                                .addComponent(txtIvap, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(40, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(TextCodProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(TextDescripcion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(TextCostoproduc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(TextPrecio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(txtIvap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel6)
                            .addComponent(LitsadeProovedores, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jcboxTipoProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jCheckBox1)))
                .addGap(59, 59, 59)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BtnIngresar)
                    .addComponent(jButton5)
                    .addComponent(jButton3))
                .addGap(42, 42, 42))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnIngresarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnIngresarActionPerformed
        // TODO add your handling code here:

        if (jCheckBox1.isSelected() == true) {
            ingresarProductoConMarcaYPeso();
            //  agregarMarcayPeso();
            log("ingresa Producto con Marca y peso");
        } else {
            ingresarProducto();
            log("ingresa Producto sin marca y peso");
        }
    }//GEN-LAST:event_BtnIngresarActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        // TODO add your handling code here:
        //METODO PARA BUSCAR EL PRODUCTO
        prodAc = obj.consultarProductoObserver(Integer.parseInt(TextCodProduct.getText()));
        log("Busquedad Producto Observer");
        log(String.valueOf(obj));
        log(String.valueOf(prodAc));
        if (prodAc == null) {
            JOptionPane.showMessageDialog(this, "No se encuentra producto con ese ID");
        } else {

            BtnIngresar.setText("Editar");
            TextCodProduct.setText(prodAc.getIdProducto() + "");
            TextCodProduct.setEnabled(false);
            TextDescripcion.setText(prodAc.getNombreProducto());
            TextDescripcion.setEnabled(false);
            TextCostoproduc.setText(prodAc.getPrecioCosto() + "");
            TextPrecio.setText(prodAc.getPrecioVenta() + "");
            txtIvap.setText(prodAc.getIvaProducto() + "");
            for (Proveedor pr : proveedores) {
                if (pr.getIdProveedor() == prodAc.getIdproveedor()) {
                    LitsadeProovedores.setSelectedItem(pr);
                }
            }
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        setExtendedState(ICONIFIED);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    //********************************************************************//
    public void cargar() {

        DefaultTableModel tabla = new DefaultTableModel();
        PreparedStatement ps;
        try {
            tabla.addColumn("id_producto");
            tabla.addColumn("descripcion");
            tabla.addColumn("precio_venta");
            tabla.addColumn("id_proveedor");
            tabla.addColumn("ivaproducto");
            tabla.addColumn("tipoproducto");
            tabla.addColumn("marcaproducto");

            ps = cn.prepareStatement("SELECT id_producto ,descripcion ,precio_venta,id_proveedor,ivaproducto,tipoproducto,marcaproducto,pesoproducto FROM producto");
            r = ps.executeQuery();

            while (r.next()) {
                Object dato[] = new Object[7];
                for (int i = 0; i < 7; i++) {
                    dato[i] = r.getString(i + 1);
                    log(String.valueOf(dato[i]));
                }
                tabla.addRow(dato);
            }
            this.jTable1.setModel(tabla);

        } catch (Exception e) {
        }
    }

    public boolean ValidarCamposVacios(JTextField... textFields) {
        for (JTextField textField : textFields) {
            if (textField.getText().isEmpty()) {
                return true;
            }
        }
        return false;
    }

    public boolean ValidarComboxVacios(JComboBox... JComboBox) {
        for (JComboBox JComboBox1 : JComboBox) {
            Object cbx = JComboBox1.getSelectedItem();
            if (cbx == null) {
                return true;
            }
        }
        return false;
    }

    public boolean ValidarJCheckBoxVacios(JCheckBox... JCheckBox) {
        for (JCheckBox JComboBox1 : JCheckBox) {
            if (JComboBox1.isSelected() == false) {
                log("vacio");
                return true;
            }
        }
        return false;
    }

    public void ValidadSoloNumeros(JTextField a) {
        a.addKeyListener(new KeyAdapter() {
            public void keyTyped(KeyEvent e) {
                Character ch = e.getKeyChar();
                if (!Character.isDigit(e.getKeyChar()) && (ch != KeyEvent.VK_BACK_SPACE) && (ch != '.')) {
                    // if(((ch < '0') || (ch > '9')) && (ch != KeyEvent.VK_BACK_SPACE)&& (ch !='.')){ 

                    getToolkit().beep();
                    e.consume();;
                }
            }
        });
    }

    public void ValidadCaracteres(JTextField a) {
        a.addKeyListener(new KeyAdapter() {
            public void keyTyped(KeyEvent e) {
                Character ch = e.getKeyChar();
                if (Character.isDigit(e.getKeyChar())) {
                    // if(((ch < '0') || (ch > '9')) && (ch != KeyEvent.VK_BACK_SPACE)&& (ch !='.')){ 

                    getToolkit().beep();
                    e.consume();;
                }

            }
        });
    }

    public void ingresarProducto() {

        boolean a = ValidarComboxVacios(LitsadeProovedores);
        boolean b = ValidarCamposVacios(TextCodProduct, TextDescripcion, TextCostoproduc, TextPrecio,txtIvap);

        if (a == true) {
            JOptionPane.showMessageDialog(this, "Por favor escoja un proveedor.");
        } else {
            if (b == true) {
                JOptionPane.showMessageDialog(this, "Faltan datos en los campos.");
            } else {
                //Producto producto = new Producto_tipo_comida( idProducto,  NombreProducto,  PrecioVenta,  PrecioCosto,  IvaProducto,  stock);
                //cliente = new Bono_Dotacion_Ropade_Trabajo(nombre, apellido, Cedula, cargo, sueldo);
                //cliente = new Bonos_hijos_empleado(nombre, apellido, Cedula, cargo, sueldo);

                if (prodAc == null) {
                    // TODO add your handling code here:
                    log(String.valueOf(prodAc == null));
                    int id_producto = Integer.parseInt(TextCodProduct.getText());
                    String Descripcion_prod = TextDescripcion.getText();
                    double Costo_Venta_prod = Double.parseDouble(TextCostoproduc.getText());
                    double Precio_prod = Double.parseDouble(TextPrecio.getText());
                    int Codigo_proveedor = ((Proveedor) LitsadeProovedores.getSelectedItem()).getIdProveedor();
                    double ivaproducto = Double.parseDouble(txtIvap.getText());
                    Object tipodelproducto = jcboxTipoProducto.getSelectedItem();

                    if (Precio_prod > Costo_Venta_prod) {
                        try {
                            boolean res = obj.AgregarProducto(id_producto, Descripcion_prod,
                                    Costo_Venta_prod,
                                    Precio_prod,
                                    Codigo_proveedor,
                                    ivaproducto,
                                    (String) tipodelproducto);

                            if (res == true) {
                                JOptionPane.showMessageDialog(null, "Producto Registrado Correctamente");
                                //this.dispose();
                            } else {
                                JOptionPane.showMessageDialog(null, "No se pudo ingresar un nuevo producto ya existe en la base"
                                        + "de datos");
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "por favor verifique la conexion del servidor ");

                        }

                    }// fin de if de condiciones
                    else {
                        JOptionPane.showMessageDialog(this, "Verifique el precio de venta tiene que se mayor que el del costo");
                    }
                } else {

                    log("actualizo");
                    double Costo_Venta_prod = Double.parseDouble(TextCostoproduc.getText());
                    double Precio_prod = Double.parseDouble(TextPrecio.getText());
                    double ivaproducto = Double.parseDouble(txtIvap.getText());
                    if (Precio_prod > Costo_Venta_prod) {

                        prodAc.setPrecioCosto(Costo_Venta_prod);
                        prodAc.setPrecioVenta(Precio_prod);
                        prodAc.setIvaProducto(ivaproducto);

                        obj.actualizaProducto(prodAc);
                        JOptionPane.showMessageDialog(this, "Producto actualizado Correctamente");
                    }
                }
            }
        }

//       this.dispose(); 
    }

    public void ingresarProductoConMarcaYPeso() {
    boolean a = ValidarComboxVacios(LitsadeProovedores);
        boolean b = ValidarCamposVacios(TextCodProduct, TextDescripcion, TextCostoproduc, TextPrecio,txtIvap);

        if (a == true) {
            JOptionPane.showMessageDialog(this, "Por favor escoja un proveedor.");
        } else {
            if (b == true) {
                JOptionPane.showMessageDialog(this, "Faltan datos en los campos.");
            } else {
                //Producto producto = new Producto_tipo_comida( idProducto,  NombreProducto,  PrecioVenta,  PrecioCosto,  IvaProducto,  stock);
                //cliente = new Bono_Dotacion_Ropade_Trabajo(nombre, apellido, Cedula, cargo, sueldo);
                //cliente = new Bonos_hijos_empleado(nombre, apellido, Cedula, cargo, sueldo);

                if (prodAc == null) {
                    // TODO add your handling code here:
                    log(String.valueOf(prodAc == null));
                    int id_producto = Integer.parseInt(TextCodProduct.getText());
                    String Descripcion_prod = TextDescripcion.getText();
                    double Costo_Venta_prod = Double.parseDouble(TextCostoproduc.getText());
                    double Precio_prod = Double.parseDouble(TextPrecio.getText());
                    int Codigo_proveedor = ((Proveedor) LitsadeProovedores.getSelectedItem()).getIdProveedor();
                    double ivaproducto = Double.parseDouble(txtIvap.getText());
                    Object tipodelproducto = jcboxTipoProducto.getSelectedItem();

                    if (Precio_prod > Costo_Venta_prod) {
                        try {
                            boolean res = obj.AgregarProducto(id_producto, Descripcion_prod,
                                    Costo_Venta_prod,
                                    Precio_prod,
                                    Codigo_proveedor,
                                    ivaproducto,
                                    (String) tipodelproducto);

                            if (res == true) {
                                JOptionPane.showMessageDialog(null, "Producto Registrado Correctamente");
                                agregarMarcayPeso();
                            } else {
                                JOptionPane.showMessageDialog(null, "No se pudo ingresar un nuevo producto ya existe en la base"
                                        + "de datos");
                            }
                        } catch (Exception e) {
                            JOptionPane.showMessageDialog(null, "por favor verifique la conexion del servidor ");

                        }

                    }// fin de if de condiciones
                    else {
                        JOptionPane.showMessageDialog(this, "Verifique el precio de venta tiene que se mayor que el del costo");
                    }
                } else {

                    log("actualizo");
                    double Costo_Venta_prod = Double.parseDouble(TextCostoproduc.getText());
                    double Precio_prod = Double.parseDouble(TextPrecio.getText());
                    double ivaproducto = Double.parseDouble(txtIvap.getText());
                    if (Precio_prod > Costo_Venta_prod) {

                        prodAc.setPrecioCosto(Costo_Venta_prod);
                        prodAc.setPrecioVenta(Precio_prod);
                        prodAc.setIvaProducto(ivaproducto);

                        obj.actualizaProducto(prodAc);
                        JOptionPane.showMessageDialog(this, "Producto actualizado Correctamente");
                    }
                }
            }
        }

//       this.dispose(); 
    }

    public void agregarMarcayPeso() {
        // TODO add your handling code here:
        ///Captura los datos que se acaban de ingresar del producto
        int id_producto = Integer.parseInt(TextCodProduct.getText());
        String Descripcion_prod = TextDescripcion.getText();
        double Costo_Venta_prod = Double.parseDouble(TextCostoproduc.getText());
        double Precio_prod = Double.parseDouble(TextPrecio.getText());
        int Codigo_proveedor = ((Proveedor) LitsadeProovedores.getSelectedItem()).getIdProveedor();
        double ivaproducto = Double.parseDouble(txtIvap.getText());
        Object tipodelproducto = jcboxTipoProducto.getSelectedItem();

        //Captura el tipo del producto
        //Se crea un nuevo objeto de tipo producto para hacer el llamado al decorador
        Producto p;
        //Switch para Ingresar al tipo de producto deseado 
        switch ((String) tipodelproducto) {
            case "Alimentos":
                log(String.valueOf(tipodelproducto));
                //Creamos un nuevo producto de tipo en este caso comida y le enviamois
                //el id y el tipo de producto
                p = new Producto_tipo_comida(id_producto, (String) tipodelproducto);
                //el producto p , ahora tendra una adicion de marca del producto
                //ingreso
                p = new Marca_del_producto(p, id_producto, Descripcion_prod, Costo_Venta_prod, Precio_prod, ivaproducto, Costo_Venta_prod);
                p.getMarca_product();
                p.getPeso_product();
                //ingreso
                break;
            case "Ropa":
                p = new Producto_tipo_ropa(id_producto, (String) tipodelproducto);
                p = new Marca_del_producto(p, id_producto, Descripcion_prod, Costo_Venta_prod, Precio_prod, ivaproducto, Costo_Venta_prod);
                p.getMarca_product();
                p.getPeso_product();

                break;

            case "Automotor":
                p = new Producto_tipo_automotor(id_producto, (String) tipodelproducto);
                p = new Marca_del_producto(p, id_producto, Descripcion_prod, Costo_Venta_prod, Precio_prod, ivaproducto, Costo_Venta_prod);
                p.getMarca_product();
                p.getPeso_product();

                break;

            case "Electronico":
                p = new Producto_tipo_electronico(id_producto, (String) tipodelproducto);
                p = new Marca_del_producto(p, id_producto, Descripcion_prod, Costo_Venta_prod, Precio_prod, ivaproducto, Costo_Venta_prod);
                p.getMarca_product();
                p.getPeso_product();

                break;
        }

    }

    public void log(String a) {
        System.out.println("la valor  = " + " " + a);
    }

    //***********************************************************************//
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VistaProductos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VistaProductos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VistaProductos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VistaProductos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VistaProductos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnIngresar;
    private javax.swing.JComboBox LitsadeProovedores;
    private javax.swing.JTextField TextCodProduct;
    private javax.swing.JTextField TextCostoproduc;
    private javax.swing.JTextField TextDescripcion;
    private javax.swing.JTextField TextPrecio;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton5;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JComboBox jcboxTipoProducto;
    private javax.swing.JTextField txtIvap;
    // End of variables declaration//GEN-END:variables
}
